name: Deploy to AWS

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  PROJECT_NAME: aselcni
  BUCKET_NAME: learnway-bucket
  CODE_DEPLOY_APP_NAME: learnway
  DEPLOYMENT_GROUP_NAME: learnway
  EC2_USER: ubuntu
  EC2_HOST: ${{ secrets.EC2_INSTANCE_IP }}
  PROJECT_DIR: /home/ubuntu/aselcni
  AWS_REGION: ap-northeast-2

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # - name: Setup SSH
      #   uses: webfactory/ssh-agent@v0.5.3
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # - name: Create project directory on EC2
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "mkdir -p ${{ env.PROJECT_DIR }}"
          
      # - name: Copy files to EC2
      #   run: |
      #     scp -o StrictHostKeyChecking=no -r * ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:${{ env.PROJECT_DIR }}
          
      # - name: Run build on EC2
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "cd ${{ env.PROJECT_DIR }} && chmod +x ./gradlew && ./gradlew build --warning-mode all --scan"
      #     if [[ $? -ne 0 ]]; then
      #       echo "Build failed, cleaning up..."
      #       ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "rm -rf ${{ env.PROJECT_DIR }}"
      #       exit 1
      #     fi

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash
      
      - name: Build with Gradle
        run: ./gradlew build
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET__ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Make zip file
        run: zip -r ${{ github.sha }}.zip .
        shell: bash


      - name: Upload to S3
        run: aws s3 cp ${{ github.sha }}.zip s3://${{ env.BUCKET_NAME }}/${{ env.PROJECT_NAME }}/${{ github.sha }}.zip --region ${{ env.AWS_REGION }}

      - name: Deploy with CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
            --deployment-group-name ${{ env.DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=${{ env.BUCKET_NAME }},bundleType=zip,key=${{ env.PROJECT_NAME }}/${{ github.sha }}.zip \
            --region ${{ env.AWS_REGION }}

      - name: Clean up on failure
        if: failure()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "rm -rf ${{ env.PROJECT_DIR }}"
